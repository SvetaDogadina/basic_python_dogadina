#  Урок 2 Задание 1 Догадина.
#  Создать список и заполнить его элементами различных типов данных.
#  Реализовать скрипт проверки типа данных каждого элемента.
#  Использовать функцию type() для проверки типа.
#  Элементы списка можно не запрашивать у пользователя,
#  а указать явно, в программе
my_list = [1, True, 3, 4.5, (10 // 4), "new word"]
print(type(my_list[0]), type(my_list[1]), type(my_list[2]), type(my_list[3]), type(my_list[4]), type(my_list[5]))
# если не известно, сколько переменных
my_list = [1, 2, 3.5, "new word"]
for num in my_list:
    print(type(num))
    #  Урок 2 Задание 2 Догадина.
#  Для списка реализовать обмен значений соседних элементов, т.е.
#  Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
#  При нечетном количестве элементов последний сохранить на своем месте.
#  Для заполнения списка элементов необходимо использовать функцию input()
#  Решение c фиксированным значением элементов списка:
user_list1 = [input("Введите значение элемента списка 1")] + [input("Введите значение элемента списка 2")] + [
    input("Введите значение элемента списка 3")] + [input("Введите значение элемента списка 4")]
print(user_list1)
# Решение с количеством элементов, которое определяет пользователь:
number = int(input("Введите количество элементов списка "))
user_list = []
i = 0
el = 0
while i < number:
    user_list.append(input("Введите следующее значение списка "))
    i += 1

for elem in range(int(len(user_list) / 2)):
    user_list[el], user_list[el + 1] = user_list[el + 1], user_list[el]
    el += 2
print(user_list)
# Урок 2 Задание 3 Догадина.
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict
# Решение dict
seasons = dict(
    {1: 'зима', 2: 'зима', 3: 'весна', 4: 'весна', 5: 'весна', 6: 'лето', 7: 'лето', 8: 'лето', 9: 'осень', 10: 'осень',
     11: 'осень', 12: 'зима'})
month = int(input("Введите номер месяца по порядку: "))
try:
    print("Этот месяц относится к сезону", seasons[month])
except KeyError:
    print("Месяца с таким номером нет")
# Решение list
season_list = [False, 'зима', 'зима', 'весна', 'весна', 'весна', 'лето', 'лето', 'лето', 'осень', 'осень',
               'осень', 'зима']
x = int(input("Введите номер месяца по порядку: "))
if x == 0:
    print("Негодник, нулевого месяца не бывает! Иди учи натуральные числа")
else:
    try:
        print("Этот месяц принадлежит сезону", season_list[x])
    except IndexError:
        print("Месяца с таким номером нет")
# Урок 2 задание 4 Догадина
# Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.
print('Введите список слов через пробел и нажмите Enter:')
lst = input().split(' ')
i = 0
if len(lst[i]) <= 10:
    for i in range(len(lst)):
        print("Номер строки :", i + 1, "слово: ", lst[i])
else:
    for i in range(len(lst)):
        print("Номер строки :", i + 1, "слово: ", lst[i][0:10])
        # Урок 2 задание 5 Догадина
# Реализовать структуру «Рейтинг», представляющую собой
# не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться
# после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде,
# например, my_list = [7, 5, 3, 3, 2].

new_list = [7, 5, 3, 3, 2]
print(f"Рейтинг - {new_list}")
integer = int(input("Введите число: "))
while integer != 111:
    for el in range(len(new_list)):
        if new_list[el] == integer:
            new_list.insert(el + 1, integer)
            break
        elif new_list[0] < integer:
            new_list.insert(0, integer)
        elif new_list[-1] > integer:
            new_list.append(integer)
        elif new_list[el] > integer and new_list[el + 1] < integer:
            new_list.insert(el + 1, integer)
    print(f"текущий список - {new_list}")
    integer = int(input("Введите число "))
